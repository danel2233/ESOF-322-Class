ESOF322, Fall 2019, Homework 4, Question 1,
Part B, SubParts 2 and 3, Tyler Ross & Daniel Vinogradov

2) With "Search in File Content" disabled/unchecked, the Design Pattern Finder
tool searches for keywords in filenames. This can be verified by creating an
empty file named "builder.java"; the tool will indicate a possible match for
the builder pattern.

When "Search in File Content" is enabled/checked, the tool expands its keyword
search to include the plaintext contents of files. This can be verified by
adding the word "observer" to an otherwise empty file; the tool will indicate a
possible match of the observer pattern.

Review of the source code (FileContainsPattern function, of DesignPatternFinder
class, in file "DesignPatternFinder.cs") shows the precise search behavior is
as follows:

	For each defined pattern (loaded from an XML file):
		If the lowercase-converted filename contains the lowercase-converted
		pattern name:
			flag the file as possibly containing that pattern

		If "Search in File Content" is enabled:
			If the lowercase-converted contents of the file contains the
			lowercase-converted pattern name:
				flag the file as possibly containing that pattern

3) The process used by this tool is simple and, based on running the tool
against the K-9 Mail source, appears to be reasonably effective. The biggest
flaws in this methodology are
	- the likelihood of false positives
	- the possibility of missed patterns
		- For example, someone unfamiliar with the precise name of a pattern
		  is unlikely to have the keyword this software expects in their code.

Though significantly more complex in design and implementation, a graph-based
metamodel is one methodology that comes to mind. Such a solution would need a
metamodel to describe design patterns in terms of a graph, and a process to
parse/abstract code into that metamodel.

Given a "code-graph" and a "pattern-graph", identifying patterns becomes a
subgraph-isomorphism/subgraph-matching problem - for which, despite its
computational complexity, there are several promising options for
algorithms/techniques.

Despite the significant increase in complexity, this could be a powerful
technique for static analysis of design patterns.
